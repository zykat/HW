============================
=== Собес 69. 01.10.2022 === 
============================

Страница грузится вниз по коду.
Тормозить загрузку html страницы может тормозить скрипт с ссылками в header.
Картинки с ссылками на внешний ресурс.
При загрузке страницы может быть до 6 потоков.
--
Скриншот всего сайта - опция в девтуле хрома. 
--
Критерии готовности для сайта.
1. выяснить срочность релиза
2. отвечает основной требуемой функциональности (исключены критические баги либо они не часто воспроизводимы)
3. пользовательские сценарии 
:::::
Этапы исследовательского тестирования:
Чек-лист - Регресс - Критикал пас - Смоук

регресс веба - среда тестирования:
вид и версия браузера - хром, фф, опера, едж
ОС - винды, айос, андроид
виды сетевого подключения

смоук:
обычный - основной функциональности, безнес-логики, один сценарий
расширенный - несколько сценариев (админ, юзер)
--
Веб-приложение инструменты:
Девтул
сравнение с figma
:::::
Функционал оплаты в вебе:
1. на ПК (браузеры)
2. мобилки. Оплата вручную (ввод юзером) - автоматом (введена карта) на разных ОС
3. варианты оплаты - платежные системы, локали
:::::
Отличие функционального от нефункционального тестирования.
зависит от специфики конечно.
НФ - с точки зрения бизнеса - юзабилити, локализация, кросплатформенность, установка, производительность (нагрузочность, стресс, масштабируемость), доступность для инвалидов 
Ф - соответствие документации с технич точки зрения - кнопки, ссылки, скорость загрузки
:::::
QA - обеспечение качества продукта на будущее( охватывает весь жизненный цикл продукта ) - оценка рисков, тестовая среда, документация, анализ требований, планирование тестирования, отчеты, критерии готовности.
QC - анализ результатов тестирования, готовность к релизу, выводы для улучшения текущего продукта
Тестирование - сама проверка соответствия продукта требованиям
:::::
Severity - серьезность - атрибут, характеризующий влияние бага на общую функциональность тестируемого продукта. 
blocker - делает невозможной всю последующую работу с программой
critical - нарушает работу основного функционала. Проявляется постоянно и делает невозможным использование программой.
major - затрудняет работу основного функционала, лишает каких то функций
minor -  функционал системы влияет относительно мало, затрудняет использование  дополнительных функций. Есть пути обхода
trivial - не влияет на функционал проекта, но ухудшает общее впечатление

Priority - Приоритет — атрибут, определяющий скорость устранения бага
top - баги, которые нужно устранять немедленно. Очень отрицательно влияют на продукт
high - баги, которые должны быть устранены в первую очередь
normal - баги устраняются во вторую очередь, в штатном порядке
low - баги, не влияющие на функционал. Устраняются  в последнюю очередь, если есть время и ресурсы
:::::
тест-кейс - ожидаемый результат
баг-репорт - ожидаемый и фактический
:::::
теплый клиент - куки сохраненные
холодный клиент - куки очищенные, данных о клиенте нет
:::::
тонкий клиент - расчеты на сервере
толстый клиент - расчеты и функциональность на пк
:::::
post - новая сущность
put - заменяет целиком (частично patch)
:::::
http-запрос - хедеры:
host, user-agent, accept, кодировка
:::::
спуфинг в браузере
:::::
токен - ключ авторизации пользователя 
:::::
метод не тот - ошибка 405 method not allowed
:::::
виды тестирования с изменениями
смоук, регресс, критикал пас
:::::
смоук Интернет-магазина:
добавление товара
оплата
регресс:
исправление задебаженного
подсветка баннеров
сортировка каталога
сравнение товара
:::::
sql
вертикально объединение - union
горизонтально - join

============================
=== Собес 70. 05.10.2022 === 
============================
методы тестирования
метод белого ящика - уровень юнит-тестирование (разрабы, самый низкий уровень)
метод серого ящика - модульное тестирование (девтул, постман)
метод черного ящика - дизайн и доки в том числе
:::::
http-запрос в вебе и в мобилах - ?
разница в хедере, значение user-agent - разная верстка (картинки,css)
верстка адаптивная - заложено разрешение (метки)
верстка респонсивная - подстраиваемая
:::::
девтул ФФ - есть возможность снифферить запрос (стопать и подменять траффик)
:::::
кейсы с ориентацией экрана - 
-залочить экран, открыть приложение, ротейт экран
-разлочить экран, открыть приложение, ротейт экран
-включить авторотейт ...
-отключить авторотейт..
-проверять кнопки при повороте (поворот это другая страница, другая верстка)
-поворот экрана записывается в лог истории приложения (кнопка назад)
:::::
прерывание в мобилках - 
звонки
смс
потеря сети
уведомления мессенджеров
отключение батареи
аларм от системы
потухание экрана
:::::
виды баз данных - 
-иерархические - Объекты делятся на родителей (основные классы или категории объектов) и потомков (экземпляры этих классов или категорий). JSON
Отношения между объектами реализованы в виде физических указателей. Не предполагает связи «многие-ко-многим»
-реляционные - данные формируются в таблицы из строк и столбцов. Взаимоотношения объектов в реляционных БД моделируются с помощью внешних ключей – ссылок на другие таблицы. 
Запросы в реляционных базах данных формируют с помощью структурированного языка SQL. 
-нереляционные базы
nosql  - Данные хранятся в виде словаря, где указателем выступает ключ 
:::::
group by - команда sql объединяющая по параметрам (среднее количество, суммированное) после выборки 
having позволяет фильтровать результат группировки

UNION объединяет данные из нескольких таблиц в одну при выборке. Вертикально
При объединении количество столбцов во всех таблицах должно совпадать.
Если не используется ключевое слово ALL для UNION, все возвращенные строки будут уникальными.

INNER JOIN, LEFT JOIN, RIGHT JOIN, JOIN используются для связывания таблиц по определенным полям связи. Горизонтально.
INNER JOIN - сохраняет пересечение обеих таблиц
LEFT JOIN - сохраняет пересечение обеих таблиц и добавляет строки таблицы слева (первая в запросе)
RIGHT JOIN - сохраняет пересечение обеих таблиц и добавляет строки таблицы справа (вторая в запросе)
FULL OUTER JOIN - сохраняет пересечение обеих таблиц, потом строки таблицы слева, потом строки таблицы справа

:::::
SDLC этапы 
- Анализ требований - Какие проблемы требуют решений
- Планирование - Что мы хотим сделать
- Проектирование и дизайн - Как мы добьемся наших целей
- Разработка ПО - регулирует процесс создания продукта
- Тестирование - регулирует обеспечение качественной работы
- Развертывание - регулирует использование финального продукта
методология
- последовательная - каскадная, водопадная - все заранее спланировано, готовят весь продукт целиком
- спиральная - особое внимание уделяется управлению рисками, повторяющаяся последовательность циклов разработки с непрерывным контролем рисков.
- инкрементная - ПО прирастает новыми блоками, модулями (добавление функциональности целостными элементами)
- итеративная - дорабатывается весь продукт итерациями (изменение фич)
- эджайл - гибкий подход, инкрементально-итеративный подход, но периоды более короткие
:::::
mvp - minimum value product - базовая версия продукта (пилотная)
:::::
примеры видов тестирования - 
положить товар в корзину и оплатить - это смоук
добавить еще одну позицию в корзину - это критикал пас
воткнуть вместо цифр буквы - экстендид 
:::::
грядет релиз -
убедиться что точно нужен
смоук тест - основная функциональность - всегда
критикал пас - желательно
регресс - если есть время (влияние внесенных изменений) - при выборе руководствуемся приоритетностью модулей
:::::
позитивные проверки - ввод валидных данных
негативные - ввод данных, которые не подразумеваются / ввод данных которые невалидные и сообщение об ошибке (предусмотрено)
:::::
веб-сервер - это сервер который работает с клиентом 
веб-сервис - работает с серверами, доставка информации для других серверов
:::::
исследовательское тестирование - без сценария,неформальное тестирование, изучение программы и параллельно проектирование сценариев
ad-hoc тестирование - пользовательское тестирование, импровизацией 
:::::
тестирование формы:  
- спросить требования
- спросить о времени
- спросить окружение, тестовую среду
:::::
тесты реконнекта мобилок
- переключение стандартов связи 3g/4g/wifi
- лифт (клетка фарадея)
- батарея
- авиарежим
:::::
тротлинг (скорость, стабильность интернета)
:::::
vpn - шифрует, меняет адрес, локацию
proxy - меняет адрес
:::::
в get можно передавать данные в url
в post можно передавать в теле или в url
:::::
============================
=== Собес 71. 13.10.2022 === 
============================
Критерии качества требований: 
Атомарность - требование, которое нельзя разбить на более детальные требования
Полнота
Консистентность
Выполнимость
Приоритизированность
Тестируемость
Недвусмысленность
Понятность
:::::
верификация - без запуска кода (статическое), правильно ли задуман продукт, хорошо ли спроектирован, проверяется дизайн, документация, процесс тестирования. 
Процесс предотвращения появления ошибок. Правильно ли делаем продукт
валидация - соответствует ли продукт описанным требованиям, ожиданиям клиента, работает ли продукт в нужных для клиента условиях и окружениях. 
Процесс поиска ошибок в уже написанном софте. Правильный ли мы делаем продукт.
:::::
виды тестирования:
- функциональное тестирование - проверить что продукт выполняет и отвечает основным требованиям с технич стороны
- нефункциональное тестирование - как работает софт - удобство, локализация, масштабируемость, производительность 
- приемочное
- большой взрыв
:::::
самый важный сценарий тестирования - смоук тест (основной функционал, что важно клиенту, пользовательские требования)
:::::
помимо пользовательских требований важно учесть юридические моменты (законность)
:::::
формат данных json - javascript object notation - по которому между общаются сервисы в архитектуре REST
JSON схема - распространенный стандарт описания структуры данных. Когда в swagger смотришь форму ответа на api запрос к примеру: видно
что получаем в качестве ключа и какой тип значения в этом ключе будет (string, integer ....)
key: value (string, integer, boolean, array) 
:::::
cookie - хранят информацию о клиенте (на стороне клиента) - логины (таймлимит)
local storage - хранятся данные страницы - картинки (до удаления)
session - клиентское поведение, куда ходил, что нажал (сотрется, когда закончится сессия)
:::::
разница GET и POST - GET передает данные в URL, POST передает данные в теле запроса
:::::
Из каких фаз состоит HTTP сессия - 
1. Клиент устанавливает соединение TCP
2. Клиент отправляет запрос и ожидает ответа.
3. Сервер обрабатывает запрос и возвращает ответ, предоставляя код состояния и соответствующие данные
:::::
Какие знаешь headers HTTP запроса 
Host, User-Agent, Accept-Encoding, Keep-Alive, Referer
:::::
Какие знаешь headers HTTP ответа
Content-Length, Content-Type, Server, Date
:::::
Что такое URL-адрес? Из чего состоит? 
Universal Resourse Locator - универсальный адрес сайта в сети, который определяет его местонахождение в сети интернет.
Состоит из трёх частей: протокол, доменное имя и путь к странице на сервере.
Строгих правил нет, но рекомендовано не использовать URL длиной более 2048 символов
:::::
Что такое endpoint API
конечная точка обращения, куда API высылает запрос
:::::
Что такое Порт
число, которое идентифицирует назначение сетевых потоков данных. 
Устраняет неоднозначность при попытки связи с хостом по IP адресу.
:::::
Хост - это любое устройство, которое подключено к локальной или к глобальной сети.
:::::
100 - continue
102 - processing
200 - success
201 - created
202 - accepted
203 - non-authoritive information
204 - no content
301 - moved permanently
302 - found 
305 - use proxy
307 - temporary redirect
308 - permanent redirect
400 - bad request
401 - unauthorized
403 - forbidden
:::::
null - пустое значение, нет переменной, нет ничего
undefined - значение не определено, перемення есть, но без значения
:::::
let - можно поменять
const - как объект не меняется (функции, класс)
:::::
ручной функциональный позитивный черный ящик - ввести данные в форму и сделать сабмит, добавить в корзину товар, оплатить товар.
:::::
манки тестинг - тестирование в произвольном порядке, без стратегии
ад-хок - тестирование без документации, узнавание продукта
санити тестинг - тестирование вглубь модуля (компонента)
:::::
руководствуемся при тестировании:
документация
опыт
интуиция
здравый смысл
конкурентное по
:::::
релизить с блокером можно, если касается не главной функциональности, не часто вызывается
тривиал с высоким приорити - нельзя релизить, если касается бизнес-интересов - опечатка в форме оплаты
:::::
в юзер-агенте указывается клиент, его версия, с которого  идет запрос. В девтуле можно изменить юзерагента. В ФФ можно изменить запрос.
:::::
ситуация Кнопка не работает в вебе - 
в elements прописано ли действие на кнопку - обработчик в event listeners или по селектору кнопки
в network - идет ли запрос при нажатии на кнопку
ошибка js отображается в console
:::::
вопроизводимость бага - появление бага в определенных условиях
хэссинг (плавающий) баг - слабовоспроизводимый баг при тех же условиях
:::::
error guessing - предугадывание ошибок - на основе опыта или знакомства с используемым инструменталом (среда, модули)
:::::
разница PUT и PATCH
put - полностью (со всеми полями, key value) или создаст новый
patch - частично (заплатка)
:::::
пароль передавать в post
:::::
STLC - жизненный цикл тестирования
- анализ требований
- разработка стратегии тестирования
- опеределение начала и окончания
- тестовая среда
- разработка тест-кейсов
- выполнение тест-кейсов
- фиксирование выявленных дефектов в ходе тестирования
- отчетность
:::::
ошибка - действия человека, приводящие к некорректному поведению системы (человеч фактор)
дефект - следствие ошибки - несовпадение ФР с ожидаемым
:::::
жизненный цикл бага
зафиксировать 
отправить разрабу
решение разраба (отказ, в работе, фича..)
фикс бага
проверка фикса
закрытие бага
:::::
баг не фиксируется, когда уже зафиксирован, когда проще выяснить у разраба
:::::
Виды и Типы тестирования - не отличаются
:::::
Реляция - связь между таблицами. Невозможно добавить данные в таблицу, если она связана с другой и в той таблице данных нет. 
:::::
Сжатые сроки тестирования.
Обязательно ремарка в графе рисков - 
из-за того что сроки были сдвинуты и время, выделенное на тестирование было значительно сокращено, гарантировать стопроцентное качество данного релиза не могу.
:::::
adaptive - верстка, которая настроена под определенные разрешения
responsive - верстка, которая подстраивается под любой экран
адаптивно-респонсивная верстка - отличается наличием брейкпойнтов при достижении которых, верстка меняется с респонсивного на адаптивный
:::::

двухфазная авторизация - oauth 2.0 - авторизация через другой источник (между системами после обмена ключами устанавливается защищенный канал, по которому происходит
обмен юзерским токеном)

