Client_Server

1) Прочиать про клиент-серверную архитектуру
Принцип организации взаимодействия при которой работа распределена между клиентом и сервером. 
Клиенты посылают запросы, сервер(ы) обеспечивают ответ на запрос.
Клиентом может выступать веб- десктоп-приложение. На сервере хранится код, на нем также производятся 
все вычисления, запросы. Для этого сервер может обращаться к серверу с Базой данных. 
Для осуществления клиент-серверного взаимодействия в Web-приложении существует ряд технологий:
- web-socket - протокол связи предназначенный для обмена клиента и сервера в режиме реального времени.
Cперва устанавливается сокетное соединение с сервером, где будет осуществляться «прослушка» данных в real-time
- REST API - архитектурная модель построения клиент-серверного взаимодействия по средствам HTTP-протокола.
Запросы и ответы по модели REST обычно приходят в формате JSON. Используются HTTP-методы.
- SOAP - протокол обмена структурированными сообщениями. Запросы и ответы в SOAP приходят в формате XML.
- GraphQL - типизированный язык запросов для API и среда для выполнения таких запросов.

Веб-сервер - это сервер реализующий http протокол. 
Веб-сервис - сервер которые отвечает на запросы другиих серверов это технология для взаимодействия между системами.

В чем разница между SOAP и REST?
REST это архитектурный стиль, а SOAP это формат обмена данными. 
Soap обмен данными xml, а rest можно xml, json или любой др. удобный формат.
 
2) Что ткое HTTP и HTTPS
http - это протокол передачи данных в виде гипертекстовых документов. Предполагает клиент-серверную структуру передачи данных.
Обычно используют при передаче данных между веб-браузером и веб-сервером в сети интернет.
Но также этот протокол используют для передачи информации в других протоколах: SOAP, в данном случае http используется, как транспорт.
API тоже использует http протокол, передаваемые данные могут иметь формат XML или JSON. Сам http использует tcp/ip соединение для передачи данных.
https - это тот же протокол передачи данных http, но данные при этом шифруются. Для этого данные http упаковываются в протокол SSL/TLS

3) HTTP методы
К HTTP методам относятся:
GET - запрос к серверу (можно закэшировать, остаются в истории, имеют ошраничение на длину запроса, менее безопасный). Передаёт данные в самой строке запроса. 
POST - передача данных от клиента к серверу, добавление новых данных
PUT - передача данных от клиента к серверу, обновление данных
DELETE - удаление данных 
HEAD - аналогичен GET, но в ответе только заголовок, без тела ответа
CONNECT - создает канал соединенеия

4) HTTP статус коды сервера
Это, как правило, трехзначный код, который информирует клиента о результате запроса.
1хх - информационные коды:
100 - continue
101 - switching protocols - клиент предлагает перейти на другой протокол
103 - checkpoint - контрольная точка, с которой возобновится запрос при прерывании
...
2хх - успешные:
200 - success - запрос успешно обработан
201 - created - в ходе запроса был создан ресурс
202 - accepted - запрос принят в обработку
...
3хх - перенаправление: 
300 - multiple choices - сервер передаёт с сообщением список из нескольких возможных вариантов перенаправления альтернатив
302 - found - страница найдена / перенесена на другой url
304 - not modified - запрашиваемый ресурс не был изменён и будет загружен из кэша
...
4хх - ошибки клиента:
400 - bad request - некорректный запрос, содержит ошибку
401 - unauthorized - неавторизован, доступ к ресурсу не предоставляется
403 - forbidden - запрещен, есть ограничение прав доступа к данному ресурсу
404 - not found - странгица не найдена
405 - method not allowed - метод не поддерживается, запрос использует метод, который не поддерживатеся данным ресурсом
...
5хх - ошибки сервера:
500 - internal server error - внутренняя ошибка сервера. Любая ошибка, которую сервер не может конкретизировать
501 - not implemented - не реализовано, сервер не может обработать запрос 
502 - bad gateway - сетевая ошибка на стороне сервера, говорит о его недоступности
503 - service unavailable - сервис недоступен в данный момент (перегружен)
504 - gateway timeout - превышение времени ожидания ответа от сервера
...

5) Что такое ядро браузера 
Ядро браузера отвечает за получение содержимого веб-страницы (HTML, XML, изображение), информации о форматировании (css).
Разница в ядре браузера по-разному инерпретирует синтаксис веб-страницы, поэтому отображение страницы в разных браузерах может
быть отличным. Это как инструкция для браузера,  как отображать информацию.

6) Какие браузеры какиие ядра используют
Существует 5 типов ядер:
Trident - ядро IE
Gecko - ядро Firefox
Presto - ядро старой Opera 
Webkit - ядро Safari
Blink - ядро Chrome

7) Что такое API
API - application programming interface. Описание того, как одна программа может взаимодействовать с другой программой, 
чтобы использовать функции этой программы внутри себя. 
Архитектура API относится к клиент-серверной. 
Наиболее популярные способы работы API:
-SOAP API - Simple Object Access Protocol, т. е. простой протокол доступа к объектам. 
Клиент и сервер обмениваются сообщениями посредством XML. Это менее гибкий API, который был более популярен в прошлом
-REST API - Representational State Transfer, т. е. передача репрезентативного состояния. Его называют «архитектурным стилем» для операций 
по работе с сервером. REST API - это API-интерфейсы, соответствующие архитектурному стилю REST
REST определяет набор функций, таких как GET, PUT, POST, DELETE, которые клиенты могут использовать для доступа к данным сервера. 

Требования к REST:  
Работает только по протоколам HTTP и HTTPS; 
Можно кэшировать; 
Поддерживает различные форматы (самый распространённый JSON)

XML - Расширяемый язык разметки для создания логической структуры данных.

Клиенты и серверы обмениваются данными по протоколу HTTP. Запросы кэшируются, промежуточные состояния данных не хранятся,  унифицированный интерфейс доступа.
-Websocket API - поддерживает двустороннюю связь между клиентскими приложениями и сервером. Сервер может сам отправлять сообщения 
подключенным клиентам (без запроса), использует объекты JSON для передачи данных.
Все API подлежат защите посредством надлежащей аутентификации и мониторинга. К ним относятся:
- токены аутентификации - проверяют, являются ли пользователи теми, за кого они себя выдают, и что у них есть права доступа для этого конкретного вызова API 
- ключи API - идентифицируют приложение и гарантируют, что оно имеет права доступа, необходимые для выполнения конкретного вызова API

8. Что такое ендпоинты
Каждый API имеет endpoint, к которому и нужно обращаться, например отправлять http-запрос. Обычно это url. 
Url включает в себя маршрут (основная часть адреса сервиса) и endpoint (часть url, которая содержит например имя вызываемого метода). 
Маршрут может иметь несколько эндпоинтов. Эндпоинт выполняет конкретную задачу, принимает параметры и возвращает данные клиенту.

9) URL (URI, URL, URN)
URI (Uniform Resource Identifier) – это строка используется для идентификации какого-либо ресурса по его адресу или по его имени, либо по тому и тому вместе.
URL (Uniform Resource Locator) – это строка используется для идентификации какого-либо ресурса, но только по его адресу, по его местоположению.
URN (Uniform Resource Name) – это строка используется для идентификации какого-либо ресурса, но только по его имени.

10) Идемпотентные HTTP методы
Метод HTTP является идемпотентным, если многократное повторение одних и тех же запросов возвращает одинаковые результаты, не изменяя состояние сервера.
Не должен иметь никаких побочных эффектов.
DELETE
GET
HEAD
PUT

11) Безопасные HTTP методы
Метод HTTP является безопасным, если он не меняет состояние сервера. Проводит операции "только чтение" (read-only). 
GET
HEAD
OPTIONS

12) Идентификация, Аутентификация, Авторизация
Идентификация - это процесс распознавания субъекта по его имени или номеру, выполняется при его попытке войти в какую-либо систему.
Обычно идентификатор (id) не является секретным, поэтому только по нему нельзя предоставлять доступ к ресурсу. 
Это первый шаг для доступа к информационным ресурсам.

Аутентификация - это процедура проверки подлинности id. Подлинность id можно проверить при помощи 
- пароля (слово, пин-код..) 
- устройство (ключ шифрования)
- биометрия

Авторизация - это предоставление доступа к ресурсу. После идентифиикации и аутентификации.

13) Что такое IP
IP - internet protocol - протокол сетевого уровня стека TCP/IP. Неотъемлемой частью протокола является адресация сети.
IP не гарантирует надёжной доставки пакета до адресата — в частности, пакеты могут прийти не в том порядке, 
в котором были отправлены, продублироваться (приходят две копии одного пакета), оказаться повреждёнными.
Гарантию безошибочной доставки пакетов дают некоторые протоколы более высокого уровня - TCP,  которsq использует IP в качестве транспорта. 
IP-адрес - цифровой идентификатор, присваиваемый устройству, которое работает в публичной или локальной сети на основе стека протоколов TCP/IP.

14) Что такое октаты в DNS
Система доменных имён (DNS) служит для перенаправления на постоянный IP-адрес веб-ресурса, она преобразовывает 
буквенные значения доменного имени в цифры IP-адреса. 
За осуществление подобного преобразования отвечает DNS-сервер, который работает согласно информации из DNS-записей. 
DNS - прикладной уровень, работает поверх UDP, на порту 53.
Заголовок DNS запроса состоит из 12 октетов. Октет равен 8 битам. Всего заголовок DNS запроса состоит из 96 битов, 
в которых передается различная информация, в соответствующих полях:
ID - поле для идентификатора транзакции
Opcode - поле о типе запроса
Rcode - поле для уведомления клиента о результате запроса
и т.д.

15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
- прикладной уровень (7. application layer) - HTTP, SMTP, DNS, Telnet, SSH 
- уровень представлений (6. presentation ) - TLS, SSL
- сеансовый уровень (5. session) - PPTP
- транспортный уровень (4. transport) - TCP, UDP 
- сетевой уровень (3. network) - IP, ICMP, OSPF 
- канальный уровень (2. datalink) - MAC, LLC, ARP
- физический уровень(1. physical) - Ethernet, Wi-Fi, DSL

17) Хедеры http запросов
- Request Headers - заголовок запроса - Connection, Accept-Encoding, User-Agent.. 
- General headers - основной заголовок - Request Method, Status Code, Remote Address..
- Response headers - заголовок ответа - Content-Type, Date, Transfer-Encoding..

18) Из чего состоит HTTP запрос
Метод, версия http, url, заголовок, тело

Из чего состоит HTTP ответ
Версия протокола, код ответа, заголовки ответа, тело ответа

optional
Frontend — клиентская сторона web-интерфейса для взаимодействия с сервисом (Web-приложением).
-- HTML (HyperText Markup Language) — язык разметки для Web-страниц, состоит из HTML-элементов, которые определяют тэги и атрибуты этих тэгов 
Несколько примеров HTML тэгов:
<html> — (основной тэг) сообщает о том, что это HTML-документ (является корневым тэгом)
<head> — (основной тэг) содержит техническую информацию
<title> — заголовок страницы
<style> — задаёт CSS стили для страницы
<script> — хранит JavaScript код и/или параметры для него (например, путь до отдельного JS-файла)
<body> — (основной тэг) определяет видимую часть страницы
-- CSS (Cascading Style Sheets) — язык описания внешнего вида HTML-документа.
-- JS (JavaScript) — это высокоуровневый мультипарадигменный язык программирования. JS скрипты встраиваются в HTML и выполняются при загрузке страницы.
(onchange, onclick)

Backend — внутренняя часть сервиса (Web-приложения), отвечающая за бизнес-логику и обработку данных, выполняющаяся на стороне сервера.
Два основных типа Backend архитектуры:
-- монолитная - все сервисы бэкенда «зашиты» в один большой модуль.
-- микросервисная - сервисы слабо связанны и взаимодействуют друг с другом находясь на разных модулях.

За общение между клиентом и сервером отвечает API.

Cache — это хранилище временных копий файлов, выступающее в качестве буфера с быстрым доступом к этим закэшированным файлам.
Cookie — это небольшие фрагменты данных, хранящие информацию о действиях на сайте и о состоянии клиента, передающиеся на сервер.

