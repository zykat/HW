Client_Server

1) Прочиать про клиент-серверную архитектуру
Принцип организации взаимодействия при которой работа распределена между клиентом и сервером. 
Клиенты посылают запросы, сервер(ы) обеспечивают ответ на запрос.
Клиентом может выступать веб- десктоп-приложение. На сервере хранится код, на нем также производятся 
все вычисления, запросы. Для этого сервер может обращаться к серверу с Базой данных. 
 
2) Что ткое HTTP и HTTPS
http - это протокол передачи данных в виде гипертекстовых документов. Предполагает клиент-серверную структуру передачи данных.
Обычно используют при передаче данных между веб-браузером и веб-сервером в сети интернет.
Но также этот протокол используют для передачи информации в других протоколах: SOAP, в данном случае http используется, как транспорт.
API тоже использует http протокол, передаваемые данные могут иметь формат XML или JSON. Сам http использует tcp/ip соединение для передачи данных.
https - это тот же протокол передачи данных http, но данные при этом шифруются. Для этого данные http упаковываются в протокол SSL/TLS

3) HTTP методы
К HTTP методам относятся:
GET - запрос к серверу (можно закэшировать, остаются в истории, имеют ошраничение на длину запроса, менее безопасный)
POST - передача данных от клиента к серверу, добавление новых данных
PUT - передача данных от клиента к серверу, обновление данных
DELETE - удаление данных 
HEAD - аналогичен GET, но в ответе только заголовок, без тела ответа
CONNECT - создает канал соединенеия

4) HTTP статус коды сервера
Это, как правило, трехзначный код, который информирует клиента о результате запроса.
1хх - информационные коды:
100 - continue
101 - switching protocols - клиент предлагает перейти на другой протокол
103 - checkpoint - контрольная точка, с которой возобновится запрос при прерывании
...
2хх - успех:
200 - success - запрос успешно обработан
201 - created - в ходе запроса был создан ресурс
202 - accepted - запрос принят в обработку
...
3хх - перенаправление: 
300 - multiple choices - сервер передаёт с сообщением список из нескольких возможных вариантов перенаправления альтернатив
302 - found - страница найдена / перенесена на другой url
...
4хх - ошибки клиента:
400 - bad request - некорректный запрос, содержит ошибку
401 - unauthorized - неавторизован, доступ к ресурсу не предоставляется
403 - forbidden - запрещен, есть ограничение прав доступа к данному ресурсу
404 - not found - странгица не найдена
405 - method not allowed - метод не поддерживается, запрос использует метод, который не поддерживатеся данным ресурсом
...
5хх - ошибки сервера:
500 - internal server error - внутренняя ошибка сервера. Любая ошибка, которую сервер не может конкретизировать
501 - not implemented - не реализовано, сервер не может обработать запрос 
503 - service unavailable - сервис недоступен в данный момент (перегружен, отключен..)
...

5) Что такое ядро браузера 
Ядро браузера отвечает за получение содержимого веб-страницы (HTML, XML, изображение), информации о форматировании (css).
Разница в ядре браузера по-разному инерпретирует синтаксис веб-страницы, поэтому отображение страницы в разных браузерах может
быть отличным. Это как инструкция для браузера,  как отображать информацию.

6) Какие браузеры какиие ядра используют
Существует 5 типов ядер:
Trident - ядро IE
Gecko - ядро Firefox
Presto - ядро старой Opera 
Webkit - ядро Safari
Blink - ядро Chrome

7) Что такое API
API - application programming interface. Описание того, как одна программа может взаимодействовать с другой программой, 
чтобы использовать функции этой программы внутри себя. 
Архитектура API относится к клиент-серверной. 
Наиболее популярные способы работы API:
-SOAP API - Simple Object Access Protocol, т. е. простой протокол доступа к объектам. 
Клиент и сервер обмениваются сообщениями посредством XML. Это менее гибкий API, который был более популярен в прошлом
-REST API - Representational State Transfer, т. е. передача репрезентативного состояния. Его называют «архитектурным стилем» для операций 
по работе с серверов.
REST определяет набор функций, таких как GET, PUT, POST, DELETE, которые клиенты могут использовать для доступа к данным сервера. 
Клиенты и серверы обмениваются данными по протоколу HTTP. Запросы кэшируются, промежуточные состояния данных не хранятся,  унифицированный интерфейс доступа.
-Websocket API - поддерживает двустороннюю связь между клиентскими приложениями и сервером. Сервер может сам отправлять сообщения 
подключенным клиентам (без запроса), использует объекты JSON для передачи данных.
Все API подлежат защите посредством надлежащей аутентификации и мониторинга. К ним относятся:
- токены аутентификации - проверяют, являются ли пользователи теми, за кого они себя выдают, и что у них есть права доступа для этого конкретного вызова API 
- ключи API - идентифицируют приложение и гарантируют, что оно имеет права доступа, необходимые для выполнения конкретного вызова API

8. Что такое ендпоинты
Каждый API имеет endpoint, к которому и нужно обращаться, например отправлять http-запрос. Обычно это url. 
Url включает в себя маршрут (основная часть адреса сервиса) и endpoint (часть url, которая содержит например имя вызываемого метода). 
Маршрут может иметь несколько эндпоинтов. Эндпоинт выполняет конкретную задачу, принимает параметры и возвращает данные клиенту.

9) URL (URI, URL, URN)
URI (Uniform Resource Identifier) – это строка используется для идентификации какого-либо ресурса по его адресу или по его имени, либо по тому и тому вместе.
URL (Uniform Resource Locator) – это строка используется для идентификации какого-либо ресурса, но только по его адресу, по его местоположению.
URN (Uniform Resource Name) – это строка используется для идентификации какого-либо ресурса, но только по его имени.

10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов