============================
=== Собес 69. 01.10.2022 === 
============================

Страница грузится вниз по коду.
Тормозить загрузку html страницы может тормозить скрипт с ссылками в header.
Картинки с ссылками на внешний ресурс.
При загрузке страницы может быть до 6 потоков.
--
Скриншот всего сайта - опция в девтуле хрома. 
--
Критерии готовности для сайта.
1. выяснить срочность релиза
2. отвечает основной требуемой функциональности (исключены критические баги либо они не часто воспроизводимы)
3. пользовательские сценарии 
:::::
Этапы исследовательского тестирования:
Чек-лист - Регресс - Критикал пас - Смоук

регресс веба - среда тестирования:
вид и версия браузера - хром, фф, опера, едж
ОС - винды, айос, андроид
виды сетевого подключения

смоук:
обычный - основной функциональности, безнес-логики, один сценарий
расширенный - несколько сценариев (админ, юзер)
--
Веб-приложение инструменты:
Девтул
сравнение с figma
:::::
Функционал оплаты в вебе:
1. на ПК (браузеры)
2. мобилки. Оплата вручную (ввод юзером) - автоматом (введена карта) на разных ОС
3. варианты оплаты - платежные системы, локали
:::::
Отличие функционального от нефункционального тестирования.
зависит от специфики конечно.
НФ - с точки зрения бизнеса - юзабилити, локализация, кросплатформенность, установка, производительность (нагрузочность, стресс, масштабируемость), доступность для инвалидов 
Ф - соответствие документации с технич точки зрения - кнопки, ссылки, скорость загрузки
:::::
QA - обеспечение качества продукта ( охватывает весь жизненный цикл продукта ) - оценка рисков, тестовая среда, документация, анализ требований, планирование тестирования, отчеты, критерии готовности.
QC - анализ результатов тестирования, готовность к релизу, выводы для улучшения продукта
Тестирование - сама проверка соответствия продукта требованиям
:::::
Severity - серьезность - атрибут, характеризующий влияние бага на общую функциональность тестируемого продукта. 
blocker - делает невозможной всю последующую работу с программой
critical - нарушает работу основного функционала. Проявляется постоянно и делает невозможным использование программой.
major - затрудняет работу основного функционала, лишает каких то функций
minor -  функционал системы влияет относительно мало, затрудняет использование  дополнительных функций. Есть пути обхода
trivial - не влияет на функционал проекта, но ухудшает общее впечатление

Priority - Приоритет — атрибут, определяющий скорость устранения бага
top - баги, которые нужно устранять немедленно. Очень отрицательно влияют на продукт
high - баги, которые должны быть устранены в первую очередь
normal - баги устраняются во вторую очередь, в штатном порядке
low - баги, не влияющие на функционал. Устраняются  в последнюю очередь, если есть время и ресурсы
:::::
тест-кейс - ожидаемый результат
баг-репорт - ожидаемый и фактический
:::::
методы тестирования:
- ящики
:::::
теплый клиент - куки сохраненные
холодный клиент - куки очищенные, данных о клиенте нет
:::::
тонкий клиент - расчеты на сервере
толстый клиент - расчеты и функциональность на пк
:::::
post - новая сущность
put - заменяет целиком (частично patch)
:::::
http-запрос - хедеры:
host, user-agent, accept, кодировка
:::::
спуфинг в браузере
:::::
токен - ключ авторизации пользователя
:::::
метод не тот - ошибка 405 method not allowed
:::::
виды тестирования с изменениями
смоук, регресс, критикал пас
:::::
смоук Интернет-магазина:
добавление товара
оплата
регресс:
исправление задебаженного
подсветка баннеров
сортировка каталога
сравнение товара
:::::
sql
вертикально объединение - union
горизонтально - join

============================
=== Собес 70. 05.10.2022 === 
============================
метод белого ящика - уровень юнит-тестирование (разрабы, самый низкий уровень)
метод серого ящика - модульное тестирование (девтул, постман)
метод черного ящика - дизайн и доки в том числе
:::::
http-запрос в вебе и в мобилах - ?
разница в хедере, значение user-agent - разная верстка (картинки,css)
верстка адаптивная - заложено разрешение (метки)
верстка респонсивная - подстраиваемая
:::::
девтул ФФ - есть возможность снифферить запрос (стопать и подменять траффик)
:::::
кейсы с ориентацией экрана - 
-залочить экран, открыть приложение, ротейт экран
-разлочить экран, открыть приложение, ротейт экран
-включить авторотейт ...
-отключить авторотейт..
-проверять кнопки при повороте (поворот это другая страница, другая верстка)
-поворот экрана записывается в лог истории приложения (кнопка назад)
:::::
прерывание в мобилках - 
звонки
смс
потеря сети
уведомления мессенджеров
отключение батареи
аларм от системы
потухание экрана
:::::
виды баз данных - 
иерархические - Объекты делятся на родителей (основные классы или категории объектов) и потомков (экземпляры этих классов или категорий).
Отношения между объектами реализованы в виде физических указателей. Не предполагает связи «многие-ко-многим»
реляционные - данные формируются в таблицы из строк и столбцов. Взаимоотношения объектов в реляционных БД моделируются с помощью внешних ключей – ссылок на другие таблицы. 
Запросы в реляционных базах данных формируют с помощью структурированного языка SQL. 
nosql  - Данные хранятся в виде словаря, где указателем выступает ключ. 
:::::
group by - команда sql объединяющая по параметрам (среднее количество, суммированное) после выборки 
having позволяет фильтровать результат группировки

UNION объединяет данные из нескольких таблиц в одну при выборке.
При объединении количество столбцов во всех таблицах должно совпадать.
Если не используется ключевое слово ALL для UNION, все возвращенные строки будут уникальными.

JOIN, INNER JOIN, LEFT JOIN, RIGHT JOIN используются для связывания таблиц по определенным полям связи.
LEFT JOIN - сохраняется таблица слева (первая в запросе)
RIGHT JOIN - сохраняется таблица справа (вторая в запросе)
:::::
SDLC этапы 
- Анализ требований - Какие проблемы требуют решений
- Планирование - Что мы хотим сделать
- Проектирование и дизайн - Как мы добьемся наших целей
- Разработка ПО - регулирует процесс создания продукта
- Тестирование - регулирует обеспечение качественной работы
- Развертывание - регулирует использование финального продукта
методология
- последовательная - каскадная, водопадная - все заранее спланировано, готовят весь продукт целиком
- спиральная - особое внимание уделяется управлению рисками, повторяющаяся последовательность циклов разработки с непрерывным контролем рисков.
- инкрементная - ПО прирастает новыми блоками, модулями (добавление функциональности целостными элементами)
- итеративная - дорабатывается весь продукт итерациями (изменение фич)
- скрам- гибкий подход, инкрементально-итеративный подход, но периоды более короткие
:::::
mvp - minimum value product - базовая версия продукта (пилотная)
:::::
примеры видов тестирования - 
положить товар в корзину и оплатить - это смоук
добавить еще одну позицию в корзину - это критикал пас
воткнуть вместо цифр буквы - экстендид 
:::::
грядет релиз -
убедиться что точно нужен
смоук тест - основная функциональность - всегда
критикал пас - желательно
регресс - если есть время (влияние внесенных изменений)
:::::
позитивные проверки - ввод валидных данных
негативные - ввод данных, которые не подразумеваются / ввод данных которые невалидные и сообщение об ошибке (предусмотрено)
:::::
веб-сервер - это сервер который работает с клиентом 
веб-сервис - работает с серверами, доставка информации для других серверов
:::::
исследовательское тестирование - без сценария,неформальное тестирование, изучение программы и параллельно проектирование сценариев
ad-hoc тестирование - пользовательское тестирование, импровизацией 
:::::
тестирование формы:  
- спросить требования
- спросить о времени
- спросить окружение, тестовую среду
:::::
тесты реконнекта мобилок
- переключение стандартов связи 3g/4g/wifi
- лифт (клетка фарадея)
- батарея
- авиарежим
:::::
тротлинг (скорость, стабильность интернета)
:::::
vpn - шифрует, меняет адрес, локацию
proxy - меняет адрес
:::::
в get можно передавать данные в url
в post можно передавать в теле или в url
:::::
