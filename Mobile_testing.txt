подготовить поток кейсов по мобильному тестированию.
гайдлайны иоса и андроид, по 10-15 пунктов.
знать новинки в релизах мобильных ОС

мобильные особенности - 
установка приложения (поведение при ситуациях прерывания, вкл.выкл зарядки, сворачивании, фоновый режим, замена сети, при (раз)блокировке экрана)
переустановка
обновление (сохранение прогресса, настроек)
тестирование прерываний (звонок, уведомление приложений, будильник, геолокация)
потеря связи (вайфай, лифты, деградация связи 4g-3g, авиарежим)
автоповорот экрана, стряхивание телефона
батарея (разный уровень заряда)
локализация (регион)
кнопки навигации, жесты (свайпы, направление жеста, долгота нажатий, тач)
кроссплатформенность мобильного приложения
для людей с ограничениями 

мобильные приложения бывают: 
нативные - написанные специально для ОС, под особенности ОС, на заточенных под ОС языками
андроид (на джава, котлин)
иос (на свифт, обжектив)
гибридные (flutter, java) - запускаются на разных ОС - код пишется фронтендщиками и билды собираются под ОС 

автоповорот экрана - 
поддерживает ли приложение ротейшн
в каждом режиме отдельно запуск приложения,
при запущенном приложении поворачиваем тлф
ротейшн по часовой стрелке - против часовой стрелки
ввод данных в разных режимах, при ротейшене
видимость кнопок в разных режимах, при ротейшене

кейсы прерываний - 
звонок с тлф
звонок по мессенджеру
смс
уведомление от мессенджеры
пуши
системные сообщения: про заряд, памятка, потеря сети
будильник
свернуть в фон
заблокировать тлф
вибросигнал

кейсы реконнекта -
потеря вайфай сигнала, переключение между роутерами (меш система)
лифт
авиарежим
гсм сигнал между собой - пропускать трафик через сниффер, где настроен тротлинг, несколько режимов

кейсы инсталяции - 
установка
удаление
обновление старой версии на новую
откат обновления
какие то баги могут возникать при первом запуске. или при последующем запуске
на сд-карту

отличие мобильного клиента от веб-клиента:
веб-клиент не ставится
юзер-агент

лайвлинесс-чек - 
это когда происходит авторизация - движением головы - динамически

разница между андроид и иос -
разные гайды
разные свайпы
разные языки разработки
различия в разрешениях экрана (много производителей у андроида)
- по популярности моделей
- размер экрана
- версия андроида
- версия лончеры 

======

SDK Android Studio - JetBrains
среда разработки, в которой андроид программисты разрабатывают мобильные приложения для андроида.

В этой среде можно собрать из кода мобильное приложение для андроида. Это эмулятор андроида.

Xcode — интегрированная среда разработки (IDE) программного обеспечения для платформ macOS, iOS.
Это симулятор иОСа.

Отличие симулятора от эмулятора
Симуляторы виртуально воспроизводят поведение системы и её интерфейса. Симуляции имитируют выполнение кода. 
Симуляторы не имитируют аппаратную часть устройств.
Эмуляторы воссоздают все основные компоненты устройства, в том числе процессор, память и устройства ввода/вывода.
Эмуляторы настраиваются в виртуальной среде. 
XCode используется для запуска iOS Simulator.
Android Studio используется для запуска Android Emulator.

Эмпирическое правило гласит — использовать эмуляторы для тестирования аппаратной части и симуляторы для тестирования программной части. 
======
Виды тестирования в мобилках подробнее

Типы мобильных тестов
Есть множество мобильных приложений и несколько видов тестирования этих приложений. Самый распространенный вид это функциональное тестирование, 
целью которого является подтверждение того, что приложение работает в соответствии с требованиями. 
Другие виды:
- Тестирование совместимости (Compatibility Testing) — с его помощью проверяется, совместимо ли мобильное приложение с разными операционными системами и версиями.
- Тестирование установки (Installation Testing) — направлено на проверку удобства процесса установки и удаления приложения для пользователя. 
С его помощью можно удостовериться, что обновления не содержат ошибок и исследовать, что происходит с приложением, если пользователь его не обновляет.
- Проверка помех (Interruption Testing) — целью этого вида тестирования является проверка поведения приложения в состоянии приостановки, а затем возврата в предыдущее состояние. 
Например, пользователь смотрит видео и в этот момент ему позвонили. Приложение, проигрывающее видео, должно перейти в фоновый режим, а после вернуться в предыдущее состояние до звонка.
- Нагрузочное тестирование (Load Testing) предназначено для проверки того, как отвечает приложение, если к нему обращаются одновременно очень много пользователей. 
Пользователи пытаются одновременно установить, удалить и использовать приложение, чтобы посмотреть, не даст ли оно сбой или медленную загрузку.
-Тестирование локализации (Localization Testing) проверяет качество адаптации под определенный географический регион. Например, тест может включить верификацию определенного языка, 
соответствие требованиям местного законодательства или временной зоны.
-Тестирование производительности (Performance Testing) — проверяет производительность приложения под определенными условиями загруженности, таких как проверка скорости приложения, 
плохое покрытие сети и недостаток доступной памяти.
- Тестирование безопасности (Security Testing) — проверяет уязвимость аутентификации, авторизации, взломов и безопасности данных.
- Юзабилити-тестирование (Usability Testing) проверяет, удобно ли пользователям использовать приложение. Цель в том, чтобы удостовериться, легко ли с помощью приложения 
выполнить определенную задачу.